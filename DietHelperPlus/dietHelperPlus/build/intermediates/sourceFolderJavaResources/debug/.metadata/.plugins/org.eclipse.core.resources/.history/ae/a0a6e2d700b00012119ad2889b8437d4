package bulat.diet.helper_ru.db;

import java.util.ArrayList;
import java.util.Map;

import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import bulat.diet.helper_ru.R;
import bulat.diet.helper_ru.adapter.BaseLoader;
import bulat.diet.helper_ru.item.Dish;
import bulat.diet.helper_ru.item.DishType;
import bulat.diet.helper_ru.item.FitnesType;

public class DishListHelper {
	public static boolean updateSport(Dish dish, Context context) {

		ContentResolver cr = context.getContentResolver();
		ContentValues values = new ContentValues();
		values.put(DishProvider.NAME, dish.getName());
		values.put(DishProvider.DESCRIPTION, dish.getDescription());
		values.put(DishProvider.CATEGORY, dish.getCategory());
		values.put(DishProvider.DESCRIPTION, dish.getDescription());
		// values.put(DishProvider.POPULARITY, dish.getPopularity());
		String where = "_id" + " = " + String.valueOf(dish.getId());
		cr.update(DishProvider.DISHLIST_CONTENT_URI, values, where, null);
		return true;
	}
	public static ArrayList<FitnesType> LoadFitnesMap(Context context) {
		ArrayList<FitnesType> categories = new ArrayList<FitnesType>();
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.CATEGORY + " = " + 100;
		String[] columns = new String[] { DishProvider.NAME,
				DishProvider.DESCRIPTION };
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, columns,
				selection, null, DishProvider.POPULARITY);
		ArrayList<Dish> result = new ArrayList<Dish>();
		if (c != null) {
			try {
				Dish res;
				while (c.moveToNext()) {
					categories.add(new FitnesType(Float.valueOf(c.getString(1)),c.getString(0)));
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				c.close();
			}
		}
		return categories;
	}
	public static Cursor getFitnes(Context context) {
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.CATEGORY + " = " + 100;

		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, null, selection,
				null, null);
		return c;
	}
	
	public static int addNewDish(Dish dish, Context context) {
		
			ContentResolver cr = context.getContentResolver();
			ContentValues values = new ContentValues();

			//values.put(DishProvider.DISH_ID, couponId);
			values.put(DishProvider.NAME, dish.getName());
			values.put(DishProvider.DESCRIPTION, dish.getName().toLowerCase());
			values.put(DishProvider.CALORICITY, dish.getCaloricity());
			values.put(DishProvider.CATEGORY, dish.getCategory());
			values.put(DishProvider.ISCATEGORY, dish.getIscategory());	
			values.put(DishProvider.POPULARITY, dish.getPopularity());	
			values.put(DishProvider.TYPE, dish.getType());	
			Uri uri = cr.insert(DishProvider.DISHLIST_CONTENT_URI, values);
			long id = ContentUris.parseId(uri);
			return (int)id;		
	}
	
	public static int addNewSport(Dish dish, Context context) {
		
		ContentResolver cr = context.getContentResolver();
		ContentValues values = new ContentValues();

		//values.put(DishProvider.DISH_ID, couponId);
		values.put(DishProvider.NAME, dish.getName());
		values.put(DishProvider.DESCRIPTION, dish.getDescription());
		values.put(DishProvider.CALORICITY, dish.getCaloricity());
		values.put(DishProvider.CATEGORY, dish.getCategory());
		values.put(DishProvider.ISCATEGORY, dish.getIscategory());	
		values.put(DishProvider.POPULARITY, dish.getPopularity());	
		values.put(DishProvider.TYPE, dish.getType());	
		Uri uri = cr.insert(DishProvider.DISHLIST_CONTENT_URI, values);
		long id = ContentUris.parseId(uri);
		return (int)id;		
}

	
	public static ArrayList<Dish> searchInAll(String searchString, Context context){
		ContentResolver cr = context.getContentResolver();
		String selection = "LOWER(" + DishProvider.DESCRIPTION + ") like '%" + searchString + "%' and " + DishProvider.ISCATEGORY + "<> 1";
		String[] columns = new String[] { DishProvider.NAME, DishProvider.CATEGORY, DishProvider.CALORICITY, DishProvider.POPULARITY, "_id", DishProvider.TYPE };
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, columns, selection, null, null);
		ArrayList<Dish> result = new ArrayList<Dish>();
		if (c!=null){
			try {
				Dish res;
				while (c.moveToNext())
		        {															
						res = new Dish();
						res.setName(c.getString(0));
						res.setCategory(c.getInt(1));
						res.setCaloricity(c.getInt(2));
						res.setPopularity(c.getInt(3));
						res.setId(c.getString(4));
						res.setIscategory(0);
						res.setType(c.getString(5));
						result.add(res);					
		        }
			}catch (Exception e) {
				e.printStackTrace();
			}finally{
				c.close();
			}
		}
		return result;
	}

	/*private static boolean alreadyExists(int couponId, Context context) {
		ContentResolver cr = context.getContentResolver();
		String selection = CouponsProvider.DEAL_ID + " = " + couponId;
		Cursor c = cr.query(CouponsProvider.CONTENT_URI, null, selection, null,
				null);
		boolean exists = c.moveToFirst();
		c.close();
		return exists;
	}*/

	public static boolean resetPopularity(String id, Context context) {
		
		Dish dish = getDishById(id, context);
		if(dish != null){
			dish.setPopularity(0);
			updateDish(dish, context);
		}
		return true;		
	}
	
	public static boolean incDishPopularity(String id, Context context) {
		
		Dish dish = getDishById(id, context);
		if(dish != null){
			dish.setPopularity(dish.getPopularity() + 1);
			updateDish(dish, context);
		}
		addToPopularGroup(dish, context);
		return true;		
	}
	
	public static boolean incFitnesPopularity(String id, Context context) {
		
		Dish dish = getDishByName(id, context);
		if(dish != null){
			dish.setPopularity(dish.getPopularity() + 1);
			updateDish(dish, context);
		}		
		return true;		
	}
	
	private static void addToPopularGroup(Dish dish, Context context) {
		if(dish.getPopularity() > 3 && dish.getCategory()!=0){
			dish.setPopularity(0);
			updateDish(dish, context);			
			dish.setCategory(0);
			if(!isAlreadyExist(dish, context)){
				addNewDish(dish, context);
			}
		}
	}

	private static boolean isAlreadyExist(Dish dish, Context context){
		
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.NAME + " = ?" + " and " + DishProvider.CATEGORY + " = " + "0"; 
		String[] val = new String[] { dish.getName() }; 
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, null, selection, val, null);
		try{		
			return c.moveToFirst();
		}catch (Exception e) {
			e.printStackTrace();
		}finally{
			c.close();
		}
		return false;
			

	}

	public static Dish getDishById(String id, Context context) {
		
		ContentResolver cr = context.getContentResolver();
		String selection = "_id" + "=" + "?" ;
		String[] columns = new String[] { DishProvider.NAME, DishProvider.CATEGORY, DishProvider.CALORICITY, DishProvider.POPULARITY, "_id", DishProvider.TYPE };
		String[] val = new String[] { id };
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, columns, selection, val, DishProvider.CATEGORY);
		Dish res = new Dish();
		if (c!=null){
			try {
				
				while (c.moveToNext())
		        {					
					res.setName(c.getString(0));
					res.setCategory(c.getInt(1));
					res.setCaloricity(c.getInt(2));
					res.setPopularity(c.getInt(3));
					res.setId(c.getString(4));
					res.setIscategory(0);
					res.setType(c.getString(5));
					return res;
		        }
				return null;
			}catch (Exception e) {
				e.printStackTrace();
			}finally{
				c.close();
			}
		}
		return null;	
	}
public static Dish getDishByName(String id, Context context) {
		
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.NAME + "=" + "?" ;
		String[] columns = new String[] { DishProvider.NAME, DishProvider.CATEGORY, DishProvider.CALORICITY, DishProvider.POPULARITY, "_id", DishProvider.TYPE };
		String[] val = new String[] { id };
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, columns, selection, val, DishProvider.CATEGORY);
		Dish res = new Dish();
		if (c!=null){
			try {
				
				while (c.moveToNext())
		        {					
					res.setName(c.getString(0));
					res.setCategory(c.getInt(1));
					res.setCaloricity(c.getInt(2));
					res.setPopularity(c.getInt(3));
					res.setId(c.getString(4));
					res.setIscategory(0);
					res.setType(c.getString(5));
					return res;
		        }
				return null;
			}catch (Exception e) {
				e.printStackTrace();
			}finally{
				c.close();
			}
		}
		return null;	
	}
	
	public static Dish getIdByDish(Dish dish, Context context) {
		
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.NAME + "=" + "? , " + DishProvider.CATEGORY + "=" + "? , " + DishProvider.CALORICITY + "=" + "? , ";
		String[] columns = new String[] {"_id"};
		String[] val = new String[] { dish.getName(),String .valueOf(dish.getCategory()),String.valueOf(dish.getCaloricity())};
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, columns, selection, val, DishProvider.CATEGORY);		
		if (c!=null){
			try {
				
				while (c.moveToNext())
		        {					
					dish.setId(c.getString(0));					
					return dish;
		        }
				return null;
			}catch (Exception e) {
				e.printStackTrace();
			}finally{
				c.close();
			}
		}
		return null;	
	}
	
	
	public static boolean updateDish(Dish dish, Context context) {
		
		ContentResolver cr = context.getContentResolver();
		ContentValues values = new ContentValues();
		values.put(DishProvider.NAME, dish.getName());
		values.put(DishProvider.DESCRIPTION, dish.getName().toLowerCase());
		values.put(DishProvider.CALORICITY, dish.getCaloricity());		
		values.put(DishProvider.CATEGORY, dish.getCategory());
		values.put(DishProvider.POPULARITY, dish.getPopularity());
		String where = "_id" + " = " + String.valueOf(dish.getId());
		cr.update(DishProvider.DISHLIST_CONTENT_URI, values, where, null);
		return true;		
	}
	

	public static Cursor getDishesByCategory(Context context, int category) {
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.CATEGORY + " = " + category + " and " +  DishProvider.ISCATEGORY + " <> 1";
		Cursor c = cr
				.query(DishProvider.DISHLIST_CONTENT_URI, null, selection, null, null);
		return c;
	}
	
	public static ArrayList<DishType> getUsingDishCategories(Context context) {
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.CATEGORY + "<>" + "?" + ") GROUP BY (" + DishProvider.CATEGORY;
		 String[] columns = new String[] { DishProvider.CATEGORY};
		 String[] val = new String[] { "test" };
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, columns, selection, val, DishProvider.CATEGORY);
		ArrayList<DishType> list = new ArrayList<DishType>();
		Map<Integer, String> categories = BaseLoader.LoadCategoryMap(R.raw.category, context);
		if (c!=null){
			try {
				
				while (c.moveToNext())
		        {
					String category = categories.get(c.getInt(0));						
					if(category!= null){
						list.add(new DishType(c.getInt(0),category));	
					}
		        }
			}catch (Exception e) {
				e.printStackTrace();
			}finally{
				c.close();
			}
		}
		return list;
	}
	
	public static ArrayList<DishType> getUnpopularDishCategories(Context context) {
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.ISCATEGORY + "=" + "?";
		String[] columns = new String[] { DishProvider.CATEGORY };
		String[] val = new String[] { "1" };
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, columns, selection, val, DishProvider.CATEGORY);
		ArrayList<DishType> list = new ArrayList<DishType>();
		Map<Integer, String> categories = BaseLoader.LoadCategoryMap(R.raw.category, context);
		if (c!=null){
			try {
				
				while (c.moveToNext())
		        {
					String category = categories.get(c.getInt(0));	
					int category_id = c.getInt(0);	
					if(category!= null && category_id!= 0){
						list.add(new DishType(c.getInt(0),category));	
					}
		        }
			}catch (Exception e) {
				e.printStackTrace();
			}finally{
				c.close();
			}
		}
		return list;
	}
	
	
	public static ArrayList<DishType> getAllDishCategories(Context context) {
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.ISCATEGORY + "=" + "?";
		String[] columns = new String[] { DishProvider.CATEGORY };
		String[] val = new String[] { "1" };
		Cursor c = cr.query(DishProvider.DISHLIST_CONTENT_URI, columns, selection, val, DishProvider.CATEGORY);
		ArrayList<DishType> list = new ArrayList<DishType>();
		Map<Integer, String> categories = BaseLoader.LoadCategoryMap(R.raw.category, context);
		if (c!=null){
			try {
				
				while (c.moveToNext())
		        {
					String value = categories.get(c.getInt(0));	
					if(value != null){
						if(c.getInt(0) != 0){
							list.add(new DishType(c.getInt(0),value));	
						}else{
							if(getDishesCount("0", context)>1){
								list.add(new DishType(c.getInt(0),value));
							}
						}
					}
		        }
			}catch (Exception e) {
				e.printStackTrace();
			}finally{
				c.close();
			}
		}
		return list;
	}
	
	public static int getDishesCount(String categiryId, Context context) {
		ContentResolver cr = context.getContentResolver();
		String selection = DishProvider.CATEGORY + "=" + categiryId;
		Cursor c = cr
				.query(DishProvider.DISHLIST_CONTENT_URI, null, selection, null, null);
		int count = 0;
		try {			
			count = c.getCount();
		}catch (Exception e) {
			e.printStackTrace();
		}finally{
			c.close();
		}
		return count;
	}

	public static void clearAll(Context context) {
		ContentResolver cr = context.getContentResolver();
		cr.delete(DishProvider.DISHLIST_CONTENT_URI, null, null);
	}

	public static void removeDish(String id , Context context) {
		ContentResolver cr = context.getContentResolver();
		
		String where = "_id" + " = " + String.valueOf(id );
		//String[] val = new String[] { String.valueOf(id )};
		
		cr.delete(DishProvider.DISHLIST_CONTENT_URI, where, null);
				
	}

}
