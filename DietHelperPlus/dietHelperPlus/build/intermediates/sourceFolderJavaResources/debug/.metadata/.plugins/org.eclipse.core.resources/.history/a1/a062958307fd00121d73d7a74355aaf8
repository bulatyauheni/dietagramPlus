package bulat.diet.helper_plus.activity;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.text.format.DateUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import au.com.bytecode.opencsv.CSVWriter;
import bulat.diet.helper_plus.R;
import bulat.diet.helper_plus.db.DishProvider;
import bulat.diet.helper_plus.db.TodayDishHelper;


import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.GraphView.GraphViewData;
import com.jjoe64.graphview.GraphViewSeries;
import com.jjoe64.graphview.LineGraphView;

public class StatisticExportActivity extends Activity {
    Context ctx = null;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		View viewToLoad = LayoutInflater.from(this.getParent()).inflate(
				R.layout.statistics_export, null);
		setContentView(viewToLoad);	
		ctx = this;
		///
		Button backButton = (Button) viewToLoad.findViewById(R.id.buttonBack);				
		backButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				onBackPressed();
			}
		});
		Button saveButton = (Button) viewToLoad.findViewById(R.id.buttonSave);				
		saveButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				  new ExportDatabaseCSVTask().execute("");
			}
		});
		
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
	}

	
	/* Checks if external storage is available for read and write */
	public boolean isExternalStorageWritable() {
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state)) {
	        return true;
	    }
	    return false;
	}

	/* Checks if external storage is available to at least read */
	public boolean isExternalStorageReadable() {
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state) ||
	        Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
	        return true;
	    }
	    return false;
	}
	
	
	
    class ExportDatabaseCSVTask extends AsyncTask<String, Void, Boolean> 


    {


        private final ProgressDialog dialog = new ProgressDialog(StatisticExportActivity.this.getParent().getParent());



        // can use UI thread here


        @Override


        protected void onPreExecute() 


        {


            this.dialog.setMessage("Exporting database...");


            this.dialog.show();


        }   



        // automatically done on worker thread (separate from UI thread)


        protected Boolean doInBackground(final String... args) 


        {           
            File exportDir = new File(Environment.getExternalStorageDirectory(), "");        
            if (!exportDir.exists()) 
            {
                exportDir.mkdirs();
            }
            File file = new File(exportDir, "excerDB.csv");
            try 
            {
                file.createNewFile();                
                CSVWriter csvWrite = new CSVWriter(new FileWriter(file));
                Cursor curCSV = TodayDishHelper.getAllDishes(ctx, String.valueOf((new Date()).getTime() - 30*DateUtils.DAY_IN_MILLIS));
                csvWrite.writeNext(curCSV.getColumnNames());
                while(curCSV.moveToNext())
                {
                    String arrStr[] ={curCSV.getString(0),curCSV.getString(1),
                    curCSV.getString(2),curCSV.getString(3),curCSV.getString(4)};
                    csvWrite.writeNext(arrStr);
                }
                csvWrite.close();
                curCSV.close();
                return true;
            }
            catch (IOException e) 
            {
               return false;
            }
        }


        // can use UI thread here


        @Override


        protected void onPostExecute(final Boolean success) 


        {


            if (this.dialog.isShowing()) 


            {


                this.dialog.dismiss();


            }


            if (success) 


            {


                Toast.makeText(ctx, "Export successful!", Toast.LENGTH_SHORT).show();


            } 


            else 


            {


                Toast.makeText(ctx, "Export failed", Toast.LENGTH_SHORT).show();


            }


        }


    }


 
	
}
