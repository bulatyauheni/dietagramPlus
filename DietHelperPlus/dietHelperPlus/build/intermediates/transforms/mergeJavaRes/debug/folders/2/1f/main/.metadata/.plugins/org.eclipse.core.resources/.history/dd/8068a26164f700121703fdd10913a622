package bulat.diet.helper_ru.activity;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import android.app.Activity;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Environment;
import android.text.format.DateUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import bulat.diet.helper_ru.R;
import bulat.diet.helper_ru.db.DishProvider;
import bulat.diet.helper_ru.db.TodayDishHelper;
import bulat.diet.helper_ru.item.Day;

import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.GraphView.GraphViewData;
import com.jjoe64.graphview.GraphViewSeries;
import com.jjoe64.graphview.LineGraphView;

public class StatisticExportActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		View viewToLoad = LayoutInflater.from(this.getParent()).inflate(
				R.layout.statistics_export, null);
		setContentView(viewToLoad);	
		
		///
		Button backButton = (Button) viewToLoad.findViewById(R.id.buttonBack);				
		backButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				onBackPressed();
			}
		});
		Button saveButton = (Button) viewToLoad.findViewById(R.id.buttonSave);				
		saveButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				saveHistory("Калькулятор_калорий");
			}
		});
		
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
	}

	
	/* Checks if external storage is available for read and write */
	public boolean isExternalStorageWritable() {
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state)) {
	        return true;
	    }
	    return false;
	}

	/* Checks if external storage is available to at least read */
	public boolean isExternalStorageReadable() {
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state) ||
	        Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
	        return true;
	    }
	    return false;
	}
	
	public File saveHistory(String name) {
	    // Get the directory for the user's public pictures directory. 
	    File file = new File(Environment.getExternalStoragePublicDirectory(
	            Environment.DIRECTORY_DCIM), name);
	    if (!file.mkdirs()) {
	    	Toast.makeText(this, getString(R.string.insert_card),
					Toast.LENGTH_LONG).show();
	    }
	    File file_s = new File (file, "Калькулятор_калорий_"+ (new Date()).getMinutes() +".csv");
        FileWriter writer;
		try {
		writer = new FileWriter(file_s);
	    Cursor c = TodayDishHelper.getLastMonthDishes(this, String.valueOf((new Date()).getTime() - 30*DateUtils.DAY_IN_MILLIS));
	    writer.append("РќР°РёРјРµРЅРѕРІР°РЅРёРµ");
	    writer.append(';');
	    writer.append("Р’РµСЃ РїРёС‰Рё");
	    writer.append(';');
	    writer.append("Р’РµСЃ С‚РµР»Р°");
	    writer.append(';');
	    writer.append("Р”Р°С‚Р°");
	    writer.append('\n');
	    if (c!=null){
			try {
				
				while (c.moveToNext())
		        {	
					writer.append(c.getString(c.getColumnIndex(DishProvider.TODAY_NAME)));
					 writer.append(';');
					 writer.append(c.getString(c.getColumnIndex(DishProvider.TODAY_DISH_WEIGHT))); 
					 writer.append(';');
					 writer.append(c.getString(c.getColumnIndex(DishProvider.TODAY_DISH_ID)));
					 writer.append(';');
					 writer.append(c.getString(c.getColumnIndex(DishProvider.TODAY_DISH_DATE)));
					 writer.append('\n');
		        }
			}catch (Exception e) {
			}finally{
				c.close();
			}
	    }
	
	    writer.flush();
	    writer.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		    	Toast.makeText(this, getString(R.string.statistic_export_save),
						Toast.LENGTH_LONG).show();

	    return file;
	}
	
	
}
