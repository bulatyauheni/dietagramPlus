package bulat.diet.helper_ru.activity;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.database.DataSetObserver;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import bulat.diet.helper_ru.R;
import bulat.diet.helper_ru.adapter.TodayDishAdapter;
import bulat.diet.helper_ru.db.DishProvider;
import bulat.diet.helper_ru.db.TodayDishHelper;
import bulat.diet.helper_ru.utils.SaveUtils;

import com.ivengo.adv.AdvView;
import com.startapp.android.publish.StartAppAd;

public class DishActivity extends BaseActivity {
	public static final String DATE = "date";
	public static final String PARENT_NAME = "parentname";
	public static final String BACKBTN = "backbtn";
	String curentDateandTime;
	ListView dishesList;
	Cursor c;
	TextView header;
	String parentName = null;
	int sum;
	protected AdvView view;
	private String bodyweight;
	private StartAppAd startAppAd = new StartAppAd(this); 
	@Override
	protected void onResume() {
		//colors
		//main FFF0E5
		//header FF9730
		//title FFF6EF
		// TODO Auto-generated method stub
		super.onResume();
		
		
		
		Bundle extras = getIntent().getExtras();
		String date = null;
		parentName = DishActivityGroup.class.toString();
		if (extras != null) {
			date = extras.getString(DATE);
			bodyweight = extras.getString(BODYWEIGHT);
			parentName = extras.getString(PARENT_NAME);
		}
		if (date == null) {
			SimpleDateFormat sdf = new SimpleDateFormat("EEE dd MMMM",new Locale(getString(R.string.locale)));
			curentDateandTime = sdf.format(new Date());
		} else {
			curentDateandTime = date;
		}
		header.setText(curentDateandTime);
		c = TodayDishHelper.getDishesByDate(getApplicationContext(),
				curentDateandTime);
		if (c != null) {
			try {
				TodayDishAdapter da;
				if (CalendarActivityGroup.class.toString().equals(parentName)) {
					da = new TodayDishAdapter(getApplicationContext(), c,
							(CalendarActivityGroup) getParent());
				} else {
					da = new TodayDishAdapter(getApplicationContext(), c,
							(DishActivityGroup) getParent());
				}

				dishesList = (ListView) findViewById(R.id.listViewTodayDishes);
				dishesList.setAdapter(da);
				dishesList.setItemsCanFocus(true);

				da.registerDataSetObserver(new DataSetObserver() {
					@Override
					public void onChanged() {
						sum = 0;
						initDishTable();									
					}
					
				});
				dishesList.setOnItemClickListener(new OnItemClickListener() {

					public void onItemClick(AdapterView<?> arg0, View v,
							int arg2, long arg3) {
					}
				});
				initDishTable();
				
			} catch (Exception e) {
				e.printStackTrace();
				if (c != null)
					c.close();
			} finally {
				// c.close();
			}
		}
		try{
			if(SaveUtils.isShowAdvert(this)){
				
				startAppAd.onResume();
				view=AdvView.create(this.getParent(),"aedl6zsvypbc");
				view.showBanner();//показать баннер
				SaveUtils.setShowAdvert(false, this);							
			}
		
		}catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	

	public void checkLimit(int sum){
		int mode = SaveUtils.getMode(this);
		switch (mode) {
		case 0:
			if(sum > Integer.parseInt(SaveUtils.getBMR(DishActivity.this))){
				LinearLayout totalLayout = (LinearLayout) findViewById(R.id.linearLayoutTotal);
				totalLayout.setBackgroundResource(R.color.light_red);
			}else{
				LinearLayout totalLayout = (LinearLayout) findViewById(R.id.linearLayoutTotal);
				totalLayout.setBackgroundResource(R.color.light_green);
			}
			TextView tvLimit = (TextView) findViewById(R.id.textViewLimitValue);
			tvLimit.setText(String.valueOf(SaveUtils.getBMR(DishActivity.this)) + getString(R.string.kcal));
			break;
		case 1:
			if(sum > Integer.parseInt(SaveUtils.getMETA(DishActivity.this))){
				LinearLayout totalLayout = (LinearLayout) findViewById(R.id.linearLayoutTotal);
				totalLayout.setBackgroundResource(R.color.light_red);
			}else{
				LinearLayout totalLayout = (LinearLayout) findViewById(R.id.linearLayoutTotal);
				totalLayout.setBackgroundResource(R.color.light_green);
			}	
			TextView tvLimit2 = (TextView) findViewById(R.id.textViewLimitValue);
			tvLimit2.setText(String.valueOf(SaveUtils.getMETA(DishActivity.this)) + getString(R.string.kcal));
			break;
		case 2:
			TextView tvLimit3 = (TextView) findViewById(R.id.textViewLimitValue);
			tvLimit3.setText(String.valueOf(SaveUtils.getBMR(DishActivity.this)) + getString(R.string.kcal) );
			if(sum < Integer.parseInt(SaveUtils.getBMR(DishActivity.this))){
				LinearLayout totalLayout = (LinearLayout) findViewById(R.id.linearLayoutTotal);
				totalLayout.setBackgroundResource(R.color.light_red);
								
			}else{
				LinearLayout totalLayout = (LinearLayout) findViewById(R.id.linearLayoutTotal);
				totalLayout.setBackgroundResource(R.color.light_green);
			}
			break;
		default:
			break;
		}
		
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		Bundle extras = getIntent().getExtras();
		View viewToLoad = LayoutInflater.from(this.getParent()).inflate(
				R.layout.today_list, null);
	   
		header = (TextView) viewToLoad.findViewById(R.id.textViewTitle);
		Button exitButton = (Button) viewToLoad.findViewById(R.id.buttonExit);
		exitButton.setOnClickListener(new OnClickListener() {
			
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent i = new Intent();
				i.setAction(BaseActivity.CUSTOM_INTENT);
				DishActivity.this.sendBroadcast(i);
				finish();				
			}
		});
		if (extras != null) {
			Boolean backb = extras.getBoolean(BACKBTN);
			if (backb) {
				Button backButton = (Button) viewToLoad
						.findViewById(R.id.buttonBack);
				backButton.setVisibility(View.VISIBLE);
				exitButton.setVisibility(View.GONE);
				backButton.setOnClickListener(new OnClickListener() {

					public void onClick(View v) {
						onBackPressed();
					}
				});
			}
		}

		Button addButton = (Button) viewToLoad.findViewById(R.id.buttonAdd);
		addButton.setOnClickListener(addTodayDishListener);
		Button fitesButton = (Button) viewToLoad.findViewById(R.id.buttonFitnes);
		fitesButton.setOnClickListener(addTodayFitnesListener);
		
		setContentView(viewToLoad);
		
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		try {
			view.dismiss();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if (c != null)
			c.close();
		Intent i = new Intent();
		i.setAction(BaseActivity.CUSTOM_INTENT);
		DishActivity.this.sendBroadcast(i);
	}

	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		super.onStop();
		if (c != null)
			c.close();

	}
	
	private OnClickListener addTodayDishListener = new OnClickListener() {
		
		public void onClick(View v) {
			Intent intent = new Intent();
			intent.putExtra(DishActivity.DATE, curentDateandTime);
			intent.putExtra(BODYWEIGHT, bodyweight);
			intent.putExtra(PARENT_NAME, parentName);
			intent.setClass(getParent(), DishListActivity.class);
			if (CalendarActivityGroup.class.toString().equals(parentName)) {
				CalendarActivityGroup activityStack = (CalendarActivityGroup) getParent();
				activityStack.push("DishListActivityCalendar", intent);
			} else {
				DishActivityGroup activityStack = (DishActivityGroup) getParent();
				activityStack.push("DishListActivity", intent);
			}
			
			/*Intent intent = new Intent(v.getContext(), ScannerActivity.class);
			intent.putExtra(Intents.Preferences.ENABLE_BEEP, false);
            intent.putExtra(Intents.Preferences.ENABLE_VIBRATE, true);
            DishActivityGroup activityStack = (DishActivityGroup) getParent();
			activityStack.startActivityForResult(intent, SCANNER_REQUEST_CODE);
			*/
        	}
		
	};
	private static final int SCANNER_REQUEST_CODE = 0;
	protected static final String BODYWEIGHT = "BODYWEIGHT";
	 @Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
	 
	        if (resultCode == Activity.RESULT_OK && requestCode == SCANNER_REQUEST_CODE) {
	        	
	            Bundle extras = data.getExtras();
	            String result = extras.getString("SCAN_RESULT");
	            Toast.makeText(this, result,
						Toast.LENGTH_LONG).show();
	            TextView textView = (TextView)findViewById(R.id.textViewTitle);
	            textView.setText(result);
	        }else{
	        	Toast.makeText(this, "No no no",
						Toast.LENGTH_LONG).show();
	        }
	}
	private OnClickListener addTodayFitnesListener = new OnClickListener() {
		
		public void onClick(View v) {
			Intent intent = new Intent();
			intent.putExtra(DishActivity.DATE, curentDateandTime);
			intent.putExtra(BODYWEIGHT, bodyweight);
			intent.putExtra(PARENT_NAME, parentName);
			intent.putExtra(AddTodayDishActivity.ADD, 1);
			intent.setClass(getParent(), AddTodayFitnesActivity.class);
			if (CalendarActivityGroup.class.toString().equals(parentName)) {
				CalendarActivityGroup activityStack = (CalendarActivityGroup) getParent();
				activityStack.push("FitnesActivityCalendar", intent);
			} else {
				DishActivityGroup activityStack = (DishActivityGroup) getParent();
				activityStack.push("FitnesActivity", intent);
			}
		}
	};
	

	private void initDishTable(){
		if (c.getCount() > 0) {
			c.moveToFirst();
			if (c.getString(c
					.getColumnIndex(DishProvider.TODAY_DISH_CALORICITY)) != null) {
				sum = sum
						+ Integer
								.parseInt(c.getString(c
										.getColumnIndex(DishProvider.TODAY_DISH_CALORICITY)));
			}
			while (c.moveToNext()) {

				sum = sum
						+ Integer
								.parseInt(c.getString(c
										.getColumnIndex(DishProvider.TODAY_DISH_CALORICITY)));
			}
			TextView tv = (TextView) findViewById(R.id.textViewTotalValue);
			tv.setText(String.valueOf(sum) + getString(R.string.kcal));
		} else {
			LinearLayout emptyHeader = (LinearLayout)findViewById(R.id.linearLayoutEmptyListHeader);
			emptyHeader.setVisibility(View.VISIBLE);
			emptyHeader.setOnClickListener(addTodayDishListener);
			TextView tv = (TextView) findViewById(R.id.textViewTotalValue);
			tv.setText(String.valueOf(0) + getString(R.string.kcal));
		}
		
		checkLimit(sum);
	}

}
