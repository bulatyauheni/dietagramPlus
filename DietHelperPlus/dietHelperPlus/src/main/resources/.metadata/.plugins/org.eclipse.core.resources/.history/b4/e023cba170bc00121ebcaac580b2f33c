package bulat.diet.helper_ru.activity;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONObject;

import com.ivengo.adv.AdvView;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.format.DateUtils;
import bulat.diet.helper_ru.R;
import bulat.diet.helper_ru.adapter.BaseLoader;
import bulat.diet.helper_ru.db.AdvertsListHelper;
import bulat.diet.helper_ru.db.DishListHelper;
import bulat.diet.helper_ru.db.TodayDishHelper;
import bulat.diet.helper_ru.item.Advert;
import bulat.diet.helper_ru.item.TodayDish;
import bulat.diet.helper_ru.utils.Constants;
import bulat.diet.helper_ru.utils.NetworkState;
import bulat.diet.helper_ru.utils.SaveUtils;
import bulat.diet.helper_ru.utils.SocialUpdater;
import bulat.diet.helper_ru.utils.Utils;

public class StartActivity extends Activity {
	public static String URLBASE = "";
	public static String URLSOCIAL = "";
	private final long SLEEP_TIME = 500;
	private final long ADV_TIME = 2000;
	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.start);

		//show 2-part advert if my own advert is empty
		if(SaveUtils.isActivated(this)){
			
		    try {
				Thread.sleep(ADV_TIME);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (SaveUtils.getCity(this).length() < 1) {
			new LocationTask().execute();
		}
		
		new SleepTask().execute();
		 if(0!=SaveUtils.getUserAdvId(this)){
			 
			 Date currDate = new Date();
			 SaveUtils.setLastVisitTime(currDate.getTime(),this);
		    	 if(currDate.getTime() - SaveUtils.getLastAdvUpdateTime(this) > 4*DateUtils.DAY_IN_MILLIS){
		    		  new UpdateTask().execute();		    		 
		    		  SaveUtils.setLastAdvUpdateTime(currDate.getTime(),this);
		    	 }
	      }else{
	    	  new RegisterTask().execute();	    	 
	      }
		 if(!SaveUtils.isFirstTime(this) && !SaveUtils.isSportLoaded(this)){
				BaseLoader.LoadFitnesMap(R.raw.fitnes, this);
		}

	}

	private class SleepTask extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			try {
				// fill db by dishes during first time runing
				// SaveUtils.setFirstTime(this, true);
				if (SaveUtils.isFirstTime(StartActivity.this)) {
					new LoadTask().execute();
					
				} else {
					new SocialUpdater(StartActivity.this, true).execute();
					checkCalendar(StartActivity.this);
					Thread.sleep(SLEEP_TIME);
				}

			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {

			Intent intent;
			intent = new Intent(StartActivity.this, DietHelperActivity.class);
			startActivity(intent);
			finish();
		}

	}
	private class LocationTask extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			//http://api.hostip.info/?ip=12.215.42.19
			if (NetworkState.isOnline(StartActivity.this)) {
				StringBuilder builder = new StringBuilder();
				HttpClient client = new DefaultHttpClient();				
				HttpGet httpGet = new HttpGet("http://smart-ip.net/geoip-json");
				try {
					HttpResponse response = client.execute(httpGet);
					StatusLine statusLine = response.getStatusLine();
					int statusCode = statusLine.getStatusCode();
					if (statusCode == 200) {
						HttpEntity entity = response.getEntity();
						InputStream content = entity.getContent();
						BufferedReader reader = new BufferedReader(
								new InputStreamReader(content));
						String line;
						while ((line = reader.readLine()) != null) {
							builder.append(line);
						}
					}
					String resultString = builder.toString().trim();	
					
					try {

						JSONObject jsonRoot = new JSONObject(resultString);

						SaveUtils.setCity(jsonRoot.getString("city"), StartActivity.this);
						SaveUtils.setCountryCode(jsonRoot.getString("countryCode"), StartActivity.this);
													
						
					}catch (Exception e) {
						e.printStackTrace();
					}
						// SaveUtils.saveNewMessagesCount();
				} catch (ClientProtocolException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}			
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {			
		}

	}
	private class RegisterTask extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			if (NetworkState.isOnline(StartActivity.this)) {
				StringBuilder builder = new StringBuilder();
				HttpClient client = new DefaultHttpClient();
				// searchString = searchString.replaceAll(" ", "%20");
				StringBuffer parametersb = new StringBuffer("");
				parametersb.append("?updateadv=" + 1);			

								
					parametersb.append("&weight="
							+(SaveUtils
							.getWeight(StartActivity.this) + Info.MIN_WEIGHT));
					parametersb.append("&high="
							+(SaveUtils
							.getHeight(StartActivity.this) + Info.MIN_HEIGHT));
					parametersb.append("&age="
							+(SaveUtils
							.getAge(StartActivity.this) + Info.MIN_AGE));
					parametersb.append("&sex="
							+(SaveUtils
							.getSex(StartActivity.this)));
					parametersb.append("&activity="
							+(SaveUtils
							.getActivity(StartActivity.this)));
					
				HttpGet httpGet = new HttpGet(Constants.URL_ADVERT + parametersb);
				try {
					HttpResponse response = client.execute(httpGet);
					StatusLine statusLine = response.getStatusLine();
					int statusCode = statusLine.getStatusCode();
					if (statusCode == 200) {
						HttpEntity entity = response.getEntity();
						InputStream content = entity.getContent();
						BufferedReader reader = new BufferedReader(
								new InputStreamReader(content));
						String line;
						while ((line = reader.readLine()) != null) {
							builder.append(line);
						}
					}
					String resultString = builder.toString().trim();
										
						try{
							if(Integer.valueOf(resultString) > 0)
								SaveUtils.setUserAdvId(StartActivity.this, Integer.valueOf(resultString));
						}catch (Exception e) {
								e.printStackTrace();
						}
				} catch (ClientProtocolException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}			
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {

		}

	}

	private class UpdateTask extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			if (NetworkState.isOnline(StartActivity.this)) {
				StringBuilder builder = new StringBuilder();
				HttpClient client = new DefaultHttpClient();
				// searchString = searchString.replaceAll(" ", "%20");
				StringBuffer parametersb = new StringBuffer("");
				//parametersb.append("?id=" + SaveUtils.getUserAdvId(StartActivity.this));
				parametersb.append("?updateadv=" + 1 + "&id="
						+ SaveUtils.getUserAdvId(StartActivity.this));
				parametersb.append("&age="
						+ (SaveUtils.getAge(StartActivity.this) + Info.MIN_AGE));
				parametersb.append("&sex=" + (SaveUtils.getSex(StartActivity.this)));
				parametersb.append("&city=" + (SaveUtils.getCity(StartActivity.this)));
				parametersb.append("&code=" + (SaveUtils.getCountryCode(StartActivity.this)));
				parametersb.append("&activity="
						+ (SaveUtils.getActivity(StartActivity.this)));
				
				HttpGet httpGet = new HttpGet(Constants.URL_ADVERT
						+ parametersb);
				try {
					HttpResponse response = client.execute(httpGet);
					StatusLine statusLine = response.getStatusLine();
					int statusCode = statusLine.getStatusCode();
					if (statusCode == 200) {
						HttpEntity entity = response.getEntity();
						InputStream content = entity.getContent();
						BufferedReader reader = new BufferedReader(
								new InputStreamReader(content));
						String line;
						while ((line = reader.readLine()) != null) {
							builder.append(line);
						}
					}
					String resultString = builder.toString().trim();

					try {

						JSONObject jsonRoot = new JSONObject(resultString);
						JSONArray jsonArray = new JSONArray(
								jsonRoot.getString("adverts"));

						for (int i = 0; i < jsonArray.length(); i++) {
							JSONObject jsonObject = jsonArray
									.getJSONObject(i);
							// fullCount = fullCount +
							// Integer.parseInt(jsonObject.getString("count"));
							AdvertsListHelper
									.addNewAdvert(
											new Advert(
													jsonObject
															.getString("id"),
													jsonObject
															.getString("type"),
													jsonObject
															.getString("offer"),
													jsonObject
															.getString("header"),
													jsonObject
															.getString("img_url"),
													jsonObject
															.getString("url"),
													jsonObject
															.getString("firm_name"),
													"",
													jsonObject
															.getString("date"),
													jsonObject
															.getInt("sex"),
													jsonObject
															.getString("title"),
													jsonObject
															.getInt("duration"),
													jsonObject
															.getInt("shownum"),
													jsonObject
															.getInt("level"),
													jsonObject
															.getString("bgcolor"),
													jsonObject
															.getString("btnbgcolor"),
													String.valueOf((new Date()).getTime() + DateUtils.DAY_IN_MILLIS *jsonObject
													.getInt("duration"))),
													StartActivity.this);
						}
						// SaveUtils.saveNewMessagesCount();
					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (ClientProtocolException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {

		}

	}

	private class LoadTask extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... params) {
			// fill db by dishes during first time runing
			// SaveUtils.setFirstTime(this, true);
			if (SaveUtils.isFirstTime(StartActivity.this)) {
				DishListHelper.clearAll(getApplicationContext());
				TodayDishHelper.clearAll(StartActivity.this);
				BaseLoader.LoadText(R.raw.base, StartActivity.this);
				SaveUtils.setFirstTime(StartActivity.this, false);
				checkCalendar(StartActivity.this);
				if(!SaveUtils.isSportLoaded(StartActivity.this)){
					BaseLoader.LoadFitnesMap(R.raw.fitnes, StartActivity.this);
				}
			} else {
				checkCalendar(StartActivity.this);
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {

			finish();
		}

	}

	public static void checkCalendar(Context ctx) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf = new SimpleDateFormat("EEE dd MMMM", new Locale(
				ctx.getString(R.string.locale)));

		String lastDate = TodayDishHelper.getLastDate(ctx);
		Date curentDateandTime = new Date();
		if (lastDate != null) {
			try {
				curentDateandTime = sdf.parse(lastDate);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Date nowDate = new Date();
			curentDateandTime.setYear(nowDate.getYear());
			// curentDateandTime = new Date(curentDateandTime.getTime() - 5 *
			// DateUtils.DAY_IN_MILLIS);
			if (nowDate.getTime() - curentDateandTime.getTime() > DateUtils.DAY_IN_MILLIS) {
				while (nowDate.getTime() - curentDateandTime.getTime() > DateUtils.DAY_IN_MILLIS) {
					curentDateandTime = new Date(curentDateandTime.getTime()
							+ DateUtils.DAY_IN_MILLIS);
					TodayDishHelper.addNewDish(
							new TodayDish("", "", 0, "", 0, 0, sdf
									.format(curentDateandTime),
									curentDateandTime.getTime(), 1, ""), ctx);
				}
			}
		} else {
			curentDateandTime = new Date();
			Date start = new Date();
			try {
				start = sdf.parse(sdf.format(new Date(curentDateandTime
						.getTime())));
			} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			start.setYear(curentDateandTime.getYear());

			TodayDishHelper.addNewDish(
					new TodayDish("", "", 0, "", 0, 0, sdf.format(new Date(
							curentDateandTime.getTime())), start.getTime(), 1,
							""), ctx);

		}
	}
}
